// -----------------------------------------------------------------------------
//  *** AUTO-GENERATED – DO NOT EDIT ***
//  Generated by build.rs – will be overwritten on every `cargo build`.
// -----------------------------------------------------------------------------

use embassy_hal_internal::impl_peripheral;

#[macro_export]
macro_rules! foreach_pin {
    ($macro:path) => {
        $macro!(P0_4, PORT0, 0, 4);
        $macro!(P1_0, PORT1, 1, 0);
        $macro!(P1_1, PORT1, 1, 1);
        $macro!(P1_2, PORT1, 1, 2);
        $macro!(P1_3, PORT1, 1, 3);
        $macro!(P1_5, PORT1, 1, 5);
        $macro!(P1_6, PORT1, 1, 6);
        $macro!(P1_8, PORT1, 1, 8);
        $macro!(P1_9, PORT1, 1, 9);
        $macro!(P1_10, PORT1, 1, 10);
        $macro!(P1_15, PORT1, 1, 15);
        $macro!(P2_5, PORT2, 2, 5);
        $macro!(P3_0, PORT3, 3, 0);
        $macro!(P4_0, PORT4, 4, 0);
        $macro!(P4_1, PORT4, 4, 1);
        $macro!(P4_2, PORT4, 4, 2);
        $macro!(P4_3, PORT4, 4, 3);
        $macro!(P4_7, PORT4, 4, 7);
        $macro!(P4_10, PORT4, 4, 10);
        $macro!(P4_11, PORT4, 4, 11);
        $macro!(P9_14, PORT9, 9, 14);
        $macro!(P9_15, PORT9, 9, 15);
    };
}

/// Zero-sized marker types for every enabled pin
pub mod peripherals {
    use super::*;

    #[derive(Debug)]
    pub struct P0_4 { pub _private: () }
    impl_peripheral!(P0_4);
    #[derive(Debug)]
    pub struct P1_0 { pub _private: () }
    impl_peripheral!(P1_0);
    #[derive(Debug)]
    pub struct P1_1 { pub _private: () }
    impl_peripheral!(P1_1);
    #[derive(Debug)]
    pub struct P1_2 { pub _private: () }
    impl_peripheral!(P1_2);
    #[derive(Debug)]
    pub struct P1_3 { pub _private: () }
    impl_peripheral!(P1_3);
    #[derive(Debug)]
    pub struct P1_5 { pub _private: () }
    impl_peripheral!(P1_5);
    #[derive(Debug)]
    pub struct P1_6 { pub _private: () }
    impl_peripheral!(P1_6);
    #[derive(Debug)]
    pub struct P1_8 { pub _private: () }
    impl_peripheral!(P1_8);
    #[derive(Debug)]
    pub struct P1_9 { pub _private: () }
    impl_peripheral!(P1_9);
    #[derive(Debug)]
    pub struct P1_10 { pub _private: () }
    impl_peripheral!(P1_10);
    #[derive(Debug)]
    pub struct P1_15 { pub _private: () }
    impl_peripheral!(P1_15);
    #[derive(Debug)]
    pub struct P2_5 { pub _private: () }
    impl_peripheral!(P2_5);
    #[derive(Debug)]
    pub struct P3_0 { pub _private: () }
    impl_peripheral!(P3_0);
    #[derive(Debug)]
    pub struct P4_0 { pub _private: () }
    impl_peripheral!(P4_0);
    #[derive(Debug)]
    pub struct P4_1 { pub _private: () }
    impl_peripheral!(P4_1);
    #[derive(Debug)]
    pub struct P4_2 { pub _private: () }
    impl_peripheral!(P4_2);
    #[derive(Debug)]
    pub struct P4_3 { pub _private: () }
    impl_peripheral!(P4_3);
    #[derive(Debug)]
    pub struct P4_7 { pub _private: () }
    impl_peripheral!(P4_7);
    #[derive(Debug)]
    pub struct P4_10 { pub _private: () }
    impl_peripheral!(P4_10);
    #[derive(Debug)]
    pub struct P4_11 { pub _private: () }
    impl_peripheral!(P4_11);
    #[derive(Debug)]
    pub struct P9_14 { pub _private: () }
    impl_peripheral!(P9_14);
    #[derive(Debug)]
    pub struct P9_15 { pub _private: () }
    impl_peripheral!(P9_15);
}
